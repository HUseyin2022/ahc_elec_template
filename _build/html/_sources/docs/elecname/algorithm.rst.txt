.. include:: substitutions.rst

|ElecName|
=========================================



Background and Related Work
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Present any background information survey the related work. Provide citations.

Distributed Algorithm: |ElecName| 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An example distributed algorithm for broadcasting on an undirected graph is presented in  :ref:`Algorithm <BlindFloodingAlgorithmLabel>`.

.. _BlindFloodingAlgorithmLabel:

.. code-block:: RST
    :linenos:
    :caption: Blind flooding algorithm.
    

    Implements: BlindFlooding Instance: cf
    Uses: LinkLayerBroadcast Instance: lbc
    Events: Init, MessageFromTop, MessageFromBottom
    Needs:

    OnInit: () do
    
    OnMessageFromBottom: ( m ) do
        Trigger lbc.Broadcast ( m )
    
    OnMessageFromTop: ( m ) do
        Trigger lbc.Broadcast ( m )


Do not forget to explain the algorithm line by line in the text.

Example
~~~~~~~~

Provide an example for the distributed algorithm.

Correctness
~~~~~~~~~~~

Present Correctness, safety, liveness and fairness proofs.


Complexity 
~~~~~~~~~~

Present theoretic complexity results in terms of number of messages and computational complexity.

Election algorithm provides that each process has the same local algorithm, it is decentralized meaning a computation can be initialized by an arbitrary non empty subset of the process. The algorithm reaches a configuration defining one process is the state leader and others are state lost. 
It is needed to be studied under assumptions such as the system is full y asynchronous and identified by a unique name.
In this section, election algorithms, focusing on two ones: the Ring Election: Dolev-Klawe-Rodeh algorithm and the Echo algorithm with extinction algorithm. We will present the principles behind these algorithms, their implementation details, and compare their strengths and weaknesses.

The Dolev-Klawe-Rodeh algorithm uses directed rings which messages cannot travel in both directions. Active process whose ID is p and next active neighbors are q and r. The Ids are collected at r. There are three cases to evaluate the election process.
If p>q and r; r remains active and progress to the next election round
if p<q or r; r becomes passive
if p=q and r; r becomes the leader 

In the algorithm processes need to keep track of the parity of their current round number.


    .. _DolevKlaweRodehAlgorithm:
 
    .. code-block:: RST
        :linenos:
        :caption: Dolev-Klawe-Rodeh Algorithm [Fokking2013]_.
                
        bool Activep, leaderp, parityp;
        proc election-idp, neighb-id[idp] for n=0,1 and Booleans b;

        If p is an initiator

        active ← true; election-id ← p;
        send <id,p,0,b>;

        If p receives <id,q,n,b>

        if activep = true then
        if n=0 then 
           send <id,q,1,b>;
        end if
        neighb-idp[n,b]← q;
        if neighb-idp[n,parityp] ≠ \bot  for n=0 and n=1 then
           perform procedure CompareIdsp;
        end if
           send<id,q,n,b>;
        end if

        Procedure CompareIdsp
        if max{election-idp,neighb-idp[1,parityp]}<neighb-idp[0,parityp] then
           election-idp ← neighb-idp[0,parityp];
           neighb-idp[n,parityp] ← ⊥ for n=0 and n=1; parityp ← ¬parityp;
           send<id,election-idp,0,parityp>;
           if neighb-idp[n,parityp] ≠ ⊥ for n=0 nad n=1 then
              perform procedure CompareIdsp;
           end if
        else if neighb-idp[0,parityp] < election-idp then
            activep←false;
        else
            leaderp←true;
        end if
        
        Echo Algorithm

        nat receivedp;
        pro parentp;
        If p is the iniaator
        send<wave> to each r ∈ Neighborsp;
        If p receives <wave> from a neighborr mess-queue
        received ← receivedp+1;
        if parentp= ⊥ and p is a noninitiator then
            parentp←q;
            if|Neighborsp|>1 then
                send<wave> to each r ∈ Neighborsp \ {q};
            else
                send<wave> to q;
            end if
        else if receivedp = |Neighborsp| then
            if parentp ≠ ⊥ then
                send <wave> to parentp;
            else
                decide;
            end if
        end if
        
        
        
        
        
        markerp[c] for all incoming channels c of p; 
        mess-queue statep[c] for all incoming channels c of p;

        If p wants to initiate a snapshot 
            perform procedure TakeSnapshotp;

        If p receives a basic message m through an incoming channel c0
        if recordedp = true and markerp[c0] = false then 
            statep[c0] ← append(statep[c0],m);
        end if

        If p receives ⟨marker⟩ through an incoming channel c0
            perform procedure TakeSnapshotp;
            markerp[c0] ← true;
            if markerp[c] = true for all incoming channels c of p then
                terminate; 
            end if

        Procedure TakeSnapshotp
        if recordedp = false then
            recordedp ← true;
            send ⟨marker⟩ into each outgoing channel of p; 
            take a local snapshot of the state of p;
        end if


    **Example**

    DRAW FIGURES REPRESENTING THE EXAMPLE AND EXPLAIN USING THE FIGURE. Imagine a distributed system with three processes, labeled Process A, Process B, and Process C, connected by communication channels. When Process A initiates a snapshot, it sends a marker along its outgoing channel. Upon receiving the marker, Process B marks its local state and forwards the marker to Process C. Similarly, Process C marks its state upon receiving the marker. As the marker propagates back through the channels, each process records the messages it sends or receives after marking its state. Finally, once the marker returns to Process A, it collects the markers and recorded states from all processes to construct a consistent global snapshot of the distributed system. This example demonstrates how the Chandy-Lamport algorithm captures a snapshot without halting the system's execution, facilitating analysis and debugging in distributed environments.


    **Correctness:**
    
    *Termination (liveness)*: As each process initiates a snapshot and sends at most one marker message, the snapshot algorithm activity terminates within a finite timeframe. If process p has taken a snapshot by this point, and q is a neighbor of p, then q has also taken a snapshot. This is because the marker message sent by p has been received by q, prompting q to take a snapshot if it hadn't already done so. Since at least one process initiated the algorithm, at least one process has taken a snapshot; moreover, the network's connectivity ensures that all processes have taken a snapshot [Tel2001]_.

    *Correctness*: We need to demonstrate that the resulting snapshot is feasible, meaning that each post-shot (basic) message is received during a post-shot event. Consider a post-shot message, denoted as m, sent from process p to process q. Before transmitting m, process p captured a local snapshot and dispatched a marker message to all its neighbors, including q. As the channels are FIFO (first-in-first-out), q received this marker message before receiving m. As per the algorithm's protocol, q took its snapshot upon receiving this marker message or earlier. Consequently, the receipt of m by q constitutes a post-shot event [Tel2001]_.

    **Complexity:**

    1. **Time Complexity**  The Chandy-Lamport :ref:`Algorithm <ChandyLamportSnapshotAlgorithm>` takes at most O(D) time units to complete where D is ...
    2. **Message Complexity:** The Chandy-Lamport :ref:`Algorithm <ChandyLamportSnapshotAlgorithm>` requires 2|E| control messages.


    **Lai-Yang Snapshot Algorithm:**

    The Lai-Yang algorithm also captures a consistent global snapshot of a distributed system. Lai and Yang proposed a modification of Chandy-Lamport's algorithm for distributed snapshot on a network of processes where the channels need not be FIFO. ALGORTHM, FURTHER DETAILS

.. [Fokking2013] Wan Fokkink, Distributed Algorithms An Intuitive Approach, The MIT Press Cambridge, Massachusetts London, England, 2013
.. [Tel2001] Gerard Tel, Introduction to Distributed Algorithms, CAMBRIDGE UNIVERSITY PRESS, 2001
.. [Lamport1985] Leslie Lamport, K. Mani Chandy: Distributed Snapshots: Determining Global States of a Distributed System. In: ACM Transactions on Computer Systems 3. Nr. 1, Februar 1985.